# Config for running the InferenceRecipe in dev/generate_v2.py to generate output
# from a Llama3.2 11B Vision Instruct model
#
# This config assumes that you've run the following command before launching:
#  tune download meta-llama/Llama-3.2-11B-Vision-Instruct --output-dir /tmp/Llama-3.2-11B-Vision-Instruct --ignore-patterns "original/consolidated*"
#
# To launch, run the following command from root torchtune directory:
#    tune run dev/generate_v2 --config llama3_2_vision/generation_v2


main_exp_name: exp-step_3
decoder_exp_name: exp-step_4


lora_adapter_path: lora-ckpts/${main_exp_name}/main/adapter_0.pt
lora_adapter_path_decoder_summary: lora-ckpts/${decoder_exp_name}/decoder/summary/adapter_0.pt
projector_weight_path_summary: lora-ckpts/${decoder_exp_name}/decoder/summary/abstract_projector_summary.pth
lora_adapter_path_decoder_caption: lora-ckpts/${decoder_exp_name}/decoder/caption/adapter_0.pt
projector_weight_path_caption: lora-ckpts/${decoder_exp_name}/decoder/caption/abstract_projector_caption.pth
lora_adapter_path_decoder_reasoning: lora-ckpts/${decoder_exp_name}/decoder/reasoning/adapter_0.pt
projector_weight_path_reasoning: lora-ckpts/${decoder_exp_name}/decoder/reasoning/abstract_projector_reasoning.pth

num_thinking_token: 1

# Model arguments
model:  # LoRA
  _component_: torchtune.models.llama3_2_vision.lora_llama3_2_vision_11b
  decoder_trainable: "lora"
  encoder_trainable: "frozen"
  fusion_trainable: "lora"
  lora_attn_modules: ['q_proj', 'k_proj', 'v_proj','output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: True
  lora_rank: 16  # higher increases accuracy and memory
  lora_alpha: 32  # usually alpha=2*rank
  lora_dropout: 0.0

model_decoder:
  _component_: torchtune.models.llama3_1.lora_llama3_1_8b
  lora_attn_modules: ['q_proj', 'k_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: True
  lora_rank: 16  # higher increases accuracy and memory
  lora_alpha: 32  # usually alpha=2*rank
  lora_dropout: 0.0
  use_abstract_projection: True
  projector_input_dim: 4096

# Transform arguments
tokenizer:
  _component_: torchtune.models.llama3_2_vision.llama3_2_vision_transform
  path: /mnt/localssd/llava-cot-checkpoints/llava-cot-pretrained/Llama-3.2V-11B-cot/original/tokenizer.model
  image_size: 560
  max_seq_len: 2048

# Checkpointer
checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /mnt/localssd/llava-cot-checkpoints/llava-cot-pretrained/Llama-3.2V-11B-cot
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    max_filename: "00009"
  recipe_checkpoint: null
  output_dir: /mnt/localssd/llava-cot-checkpoints/output-checkpoints/Llama-3.2-11B-Vision-LoRA/${main_exp_name}/main/
  model_type: LLAMA3_VISION

# Xuan: add for decoder checkpointer
checkpointer_decoder:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /mnt/localssd/llava-cot-checkpoints/llama3_1/Llama-3.1-8B-Instruct/
  checkpoint_files: [
    model-00001-of-00004.safetensors,
    model-00002-of-00004.safetensors,
    model-00003-of-00004.safetensors,
    model-00004-of-00004.safetensors
  ]
  recipe_checkpoint: null
  output_dir: /mnt/localssd/llava-cot-checkpoints/output-checkpoints/Llama-3.1-8B-Instruct-LoRA/${decoder_exp_name}/decoder/
  model_type: LLAMA3

# Device
device: cuda
dtype: bf16
seed: 6
log_level: INFO

# Generation arguments
max_new_tokens: 128  # 2048
temperature: 0.6 # 0.6  # 0.8 and 0.6 are popular values to try
top_k: 50 # 50


input_question: "Which automotive brand does this car belong to, and what visual cues or badges indicate that?"

prompt:
  # system: You are a helpful assistant who responds like the author Shakespeare.
  user:
    image: asserts/1987-BMW-E30-M3.png
    text: ${input_question}

prompt_summary:
  # system: You are a helpful assistant who responds like the author Shakespeare.
  user:
    text: "For the question: '${input_question}' Can you explain the thinking progress <THINKING_OF_SUMMARY>?"

prompt_caption:
  # system: You are a helpful assistant who responds like the author Shakespeare.
  user:
    text: "For the question: '${input_question}' Can you explain the thinking progress <THINKING_OF_CAPTION>?"

prompt_reasoning:
  # system: You are a helpful assistant who responds like the author Shakespeare.
  user:
    text: "For the question: '${input_question}' Can you explain the thinking progress <THINKING_OF_REASONING>?"
